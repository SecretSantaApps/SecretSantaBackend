openapi: "3.0.3"
info:
  title: "Secret Santa API"
  description: "Secret Santa API"
  version: "1.0.0"
servers:
  - url: "http://0.0.0.0:8080"
paths:
  /api/v1/game/info:
    get:
      description: ""
      parameters:
        - name: "id"
          in: "query"
          required: false
          schema:
            type: "string"
      responses:
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "object"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "User not exists"
                Example#2:
                  value: "Room not exists"
                Example#3:
                  value: "Wrong room name"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/InfoDetails"
  /api/v1/game/join:
    post:
      description: ""
      parameters:
        - name: "id"
          in: "query"
          required: false
          schema:
            type: "string"
        - name: "pass"
          in: "query"
          required: false
          schema:
            type: "string"
      responses:
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "object"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "User not exists"
                Example#2:
                  value: "Room not exists"
                Example#3:
                  value: "Wrong password format"
                Example#4:
                  value: "Wrong room id"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Something went wrong"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "object"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "User already in room"
                Example#2:
                  value: "Game already started"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/v1/game/kick:
    post:
      description: ""
      responses:
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "object"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "object"
              examples:
                Example#1:
                  value: "You should use /leave instead of /kick"
                Example#2:
                  value: "User not in the room"
                Example#3:
                  value: "User not exists"
                Example#4:
                  value: "Room not exists"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Something went wrong"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "object"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Game already started"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/v1/game/leave:
    post:
      description: ""
      parameters:
        - name: "id"
          in: "query"
          required: false
          schema:
            type: "string"
      responses:
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "object"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "User not exists"
                Example#2:
                  value: "Room not exists"
                Example#3:
                  value: "Wrong room id"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Something went wrong"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Game already started"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "User not in the room"
  /api/v1/game/start:
    post:
      description: ""
      parameters:
        - name: "id"
          in: "query"
          required: false
          schema:
            type: "string"
      responses:
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "object"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Not enough users to start playing"
                Example#2:
                  value: "User not exists"
                Example#3:
                  value: "Room not exists"
                Example#4:
                  value: "Wrong room id"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Something went wrong"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "object"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Game already started"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/v1/game/stop:
    post:
      description: ""
      parameters:
        - name: "id"
          in: "query"
          required: false
          schema:
            type: "string"
      responses:
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "object"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "User not exists"
                Example#2:
                  value: "Room not exists"
                Example#3:
                  value: "Wrong room id"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Something went wrong"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "object"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Game already stopped"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/v1/room:
    get:
      description: ""
      parameters:
        - name: "id"
          in: "query"
          required: false
          schema:
            type: "string"
      responses:
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "object"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "User not exists"
                Example#2:
                  value: "Room not exists"
                Example#3:
                  value: "Wrong room id"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Room"
    post:
      description: ""
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "object"
              examples:
                Example#1:
                  value: "User not exists"
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "object"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Something went wrong"
                Example#2:
                  value: "Something went wrong"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Room"
    patch:
      description: ""
      parameters:
        - name: "id"
          in: "query"
          required: false
          schema:
            type: "string"
      responses:
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "object"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "object"
              examples:
                Example#1:
                  value: "User not exists"
                Example#2:
                  value: "Room not exists"
                Example#3:
                  value: "Wrong room id"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Something went wrong"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
    delete:
      description: ""
      parameters:
        - name: "id"
          in: "query"
          required: false
          schema:
            type: "string"
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "User Not Exists"
                Example#2:
                  value: "Room not exists"
                Example#3:
                  value: "Wrong room id"
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "object"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Something went wrong"
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /api/v1/user:
    get:
      description: ""
      parameters:
        - name: "id"
          in: "query"
          required: false
          schema:
            type: "string"
      responses:
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "object"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Something went wrong"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "User not exists"
    post:
      description: ""
      responses:
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "object"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Something went wrong"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "User already exists"
    patch:
      description: ""
      responses:
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "object"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "object"
              examples:
                Example#1:
                  value: "User not exists"
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Something went wrong"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
    delete:
      description: ""
      responses:
        "500":
          description: "Internal Server Error"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Something went wrong"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "User not exists"

  /api/v1/user/rooms:
    get:
      description: ""
      responses:
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/RoomInfo"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "User not exists"

components:
  schemas:
    User:
      type: "object"
      properties:
        userId:
          type: "string"
        username:
          type: "string"
    InfoDetails:
      type: "object"
      properties:
        roomId:
          type: "string"
        roomName:
          type: "string"
        ownerId:
          type: "string"
        password:
          type: "string"
        date:
          type: "string"
          format: "date"
        maxPrice:
          type: "integer"
          format: "int32"
        users:
          type: "array"
          items:
            $ref: "#/components/schemas/User"
        recipient:
          type: "string"
    Room:
      type: "object"
      properties:
        name:
          type: "string"
        password:
          type: "string"
        id:
          type: "string"
        date:
          type: "string"
          format: "date"
        ownerId:
          type: "string"
        maxPrice:
          type: "integer"
          format: "int32"
        gameStarted:
          type: "boolean"
        membersCount:
          type: "integer"
          format: "int32"
    RoomInfo:
      type: "object"
      properties:
        name:
          type: "string"
        id:
          type: "string"
        date:
          type: "string"
          format: "date"
        ownerId:
          type: "string"
        maxPrice:
          type: "integer"
          format: "int32"
        gameStarted:
          type: "boolean"
        membersCount:
          type: "integer"
          format: "int32"
    Map:
      type: "object"
      properties: { }